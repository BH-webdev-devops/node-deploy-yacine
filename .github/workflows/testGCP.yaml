# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)  
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'student-sandbox-project' # TODO: update to your Google Cloud project ID
  GAR_NAME : my-docker-repo
  GAR_LOCATION : 'us-central1'
  REGION: 'us-central1' # TODO: update to your region
  SERVICE: 'node-deploy' # TODO: update to your service name
  WORKLOAD_IDENTITY_PROVIDER: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider' # TODO: update to your workload identity provider

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
        # Step 1: Checkout the code
        - name: Checkout code
          uses: actions/checkout@v2
  
        # Step 2: Setup Node.js
        - name: Setup Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16'
  
        # Set up Docker
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2
  
        # Step 3: Install dependencies
        - name: Install dependencies
          run: npm install
  
        # Step 4: Build the application
        - name: Build the application
          run: npm run build
  
        # Optional Step: Start the server for testing (remove if not needed)
        - name: Start the server (if applicable)
          run: npm start &
          env:
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_PORT: ${{ secrets.DB_PORT }}
            DB_DATABASE: ${{ secrets.DB_DATABASE }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  
        # Step 5: Set up Google Cloud credentials
        - name: Authenticate to Google Cloud
          uses: google-github-actions/auth@v2
          with:
            credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
  
        - name: 'Docker Auth'
          run: |-
              gcloud auth configure-docker "${{env.GAR_LOCATION}}-docker.pkg.dev"
    
        - name: 'Build and Push Container'
          run: |-
              DOCKER_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{env.GAR_LOCATION}}/${{ env.SERVICE }}:${{ github.sha }}"
              docker build --tag "${DOCKER_TAG}" .
              docker push ${DOCKER_TAG}
            


        - name: 'Deploy to Cloud Run'
    
            # END - Docker auth and build
    
          uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
          with:
              service: '${{ env.SERVICE }}'
              region: '${{ env.REGION }}'
              # NOTE: If using a pre-built image, update the image name below:
              image: "$${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{env.GAR_LOCATION}}/${{ env.SERVICE }}:${{ github.sha }}"
          # If required, use the Cloud Run URL output in later steps
        - name: 'Show output'
          run: |2-



              # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
    #   - id: 'auth'
    #     name: 'Authenticate to Google Cloud'
    #     uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
    #     with:
    #       workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'